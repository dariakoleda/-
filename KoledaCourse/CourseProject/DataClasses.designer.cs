#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CourseProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ERBook")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertStudents(Students instance);
    partial void UpdateStudents(Students instance);
    partial void DeleteStudents(Students instance);
    partial void InsertTeachers(Teachers instance);
    partial void UpdateTeachers(Teachers instance);
    partial void DeleteTeachers(Teachers instance);
    partial void InsertRegisterBook(RegisterBook instance);
    partial void UpdateRegisterBook(RegisterBook instance);
    partial void DeleteRegisterBook(RegisterBook instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(CurrentDB.ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Students> Students
		{
			get
			{
				return this.GetTable<Students>();
			}
		}
		
		public System.Data.Linq.Table<Teachers> Teachers
		{
			get
			{
				return this.GetTable<Teachers>();
			}
		}
		
		public System.Data.Linq.Table<RegisterBook> RegisterBook
		{
			get
			{
				return this.GetTable<RegisterBook>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Students : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_student;
		
		private string _group_st;
		
		private string _surname;
		
		private string _name;
		
		private string _patronymic;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_studentChanging(int value);
    partial void Onid_studentChanged();
    partial void Ongroup_stChanging(string value);
    partial void Ongroup_stChanged();
    partial void OnsurnameChanging(string value);
    partial void OnsurnameChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpatronymicChanging(string value);
    partial void OnpatronymicChanged();
    #endregion
		
		public Students()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_student", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_student
		{
			get
			{
				return this._id_student;
			}
			set
			{
				if ((this._id_student != value))
				{
					this.Onid_studentChanging(value);
					this.SendPropertyChanging();
					this._id_student = value;
					this.SendPropertyChanged("id_student");
					this.Onid_studentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_st", DbType="VarChar(120) NOT NULL", CanBeNull=false)]
		public string group_st
		{
			get
			{
				return this._group_st;
			}
			set
			{
				if ((this._group_st != value))
				{
					this.Ongroup_stChanging(value);
					this.SendPropertyChanging();
					this._group_st = value;
					this.SendPropertyChanged("group_st");
					this.Ongroup_stChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surname", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnsurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("surname");
					this.OnsurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patronymic", DbType="VarChar(20)")]
		public string patronymic
		{
			get
			{
				return this._patronymic;
			}
			set
			{
				if ((this._patronymic != value))
				{
					this.OnpatronymicChanging(value);
					this.SendPropertyChanging();
					this._patronymic = value;
					this.SendPropertyChanged("patronymic");
					this.OnpatronymicChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teachers")]
	public partial class Teachers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_teacher;
		
		private string _subject;
		
		private string _surname;
		
		private string _name;
		
		private string _patronymic;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_teacherChanging(int value);
    partial void Onid_teacherChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void OnsurnameChanging(string value);
    partial void OnsurnameChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpatronymicChanging(string value);
    partial void OnpatronymicChanged();
    #endregion
		
		public Teachers()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_teacher", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_teacher
		{
			get
			{
				return this._id_teacher;
			}
			set
			{
				if ((this._id_teacher != value))
				{
					this.Onid_teacherChanging(value);
					this.SendPropertyChanging();
					this._id_teacher = value;
					this.SendPropertyChanged("id_teacher");
					this.Onid_teacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="VarChar(120) NOT NULL", CanBeNull=false)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surname", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnsurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("surname");
					this.OnsurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patronymic", DbType="VarChar(20)")]
		public string patronymic
		{
			get
			{
				return this._patronymic;
			}
			set
			{
				if ((this._patronymic != value))
				{
					this.OnpatronymicChanging(value);
					this.SendPropertyChanging();
					this._patronymic = value;
					this.SendPropertyChanged("patronymic");
					this.OnpatronymicChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegisterBook")]
	public partial class RegisterBook : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_rb;
		
		private System.DateTime _class_date;
		
		private string _topic;
		
		private string _mark;
		
		private int _id_teacher;
		
		private int _id_student;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_rbChanging(int value);
    partial void Onid_rbChanged();
    partial void Onclass_dateChanging(System.DateTime value);
    partial void Onclass_dateChanged();
    partial void OntopicChanging(string value);
    partial void OntopicChanged();
    partial void OnmarkChanging(string value);
    partial void OnmarkChanged();
    partial void Onid_teacherChanging(int value);
    partial void Onid_teacherChanged();
    partial void Onid_studentChanging(int value);
    partial void Onid_studentChanged();
    #endregion
		
		public RegisterBook()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_rb", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_rb
		{
			get
			{
				return this._id_rb;
			}
			set
			{
				if ((this._id_rb != value))
				{
					this.Onid_rbChanging(value);
					this.SendPropertyChanging();
					this._id_rb = value;
					this.SendPropertyChanged("id_rb");
					this.Onid_rbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_class_date", DbType="Date NOT NULL")]
		public System.DateTime class_date
		{
			get
			{
				return this._class_date;
			}
			set
			{
				if ((this._class_date != value))
				{
					this.Onclass_dateChanging(value);
					this.SendPropertyChanging();
					this._class_date = value;
					this.SendPropertyChanged("class_date");
					this.Onclass_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_topic", DbType="VarChar(120)")]
		public string topic
		{
			get
			{
				return this._topic;
			}
			set
			{
				if ((this._topic != value))
				{
					this.OntopicChanging(value);
					this.SendPropertyChanging();
					this._topic = value;
					this.SendPropertyChanged("topic");
					this.OntopicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mark", DbType="VarChar(2)")]
		public string mark
		{
			get
			{
				return this._mark;
			}
			set
			{
				if ((this._mark != value))
				{
					this.OnmarkChanging(value);
					this.SendPropertyChanging();
					this._mark = value;
					this.SendPropertyChanged("mark");
					this.OnmarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_teacher", DbType="Int NOT NULL")]
		public int id_teacher
		{
			get
			{
				return this._id_teacher;
			}
			set
			{
				if ((this._id_teacher != value))
				{
					this.Onid_teacherChanging(value);
					this.SendPropertyChanging();
					this._id_teacher = value;
					this.SendPropertyChanged("id_teacher");
					this.Onid_teacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_student", DbType="Int NOT NULL")]
		public int id_student
		{
			get
			{
				return this._id_student;
			}
			set
			{
				if ((this._id_student != value))
				{
					this.Onid_studentChanging(value);
					this.SendPropertyChanging();
					this._id_student = value;
					this.SendPropertyChanged("id_student");
					this.Onid_studentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
